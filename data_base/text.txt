#ifndef THREAD_PLOT_H
#define THREAD_PLOT_H

#include <wx/thread.h>
#include <wx/event.h>
#include <vector>

wxDECLARE_EVENT(wxEVT_THREAD_PLOT, wxThreadEvent);

class ThreadPlot : public wxThread
{
public:
    ThreadPlot(wxEvtHandler* parent);
    virtual ~ThreadPlot();
    
    void Stop(); // New method to stop the thread

protected:
    virtual ExitCode Entry();
    void OnExit();

private:
    wxEvtHandler* m_parent;
    bool m_stop; // Flag to control thread termination
};

#endif // THREAD_PLOT_H


////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#include "Thread_plot.h"

wxDEFINE_EVENT(wxEVT_THREAD_PLOT, wxThreadEvent);

ThreadPlot::ThreadPlot(wxEvtHandler* parent)
    : wxThread(wxTHREAD_DETACHED), m_parent(parent), m_stop(false)
{
}

ThreadPlot::~ThreadPlot()
{
    Stop(); // Ensure the thread is stopped before destruction
}

void ThreadPlot::Stop()
{
    if (IsRunning())
    {
        m_stop = true;
        Wait();
    }
}

wxThread::ExitCode ThreadPlot::Entry()
{
    while (!m_stop)
    {
        // Thread task implementation

        wxThreadEvent* evt = new wxThreadEvent(wxEVT_THREAD_PLOT);
        wxQueueEvent(m_parent, evt);
        
        // Simulate some work
        wxMilliSleep(100);
    }
    return (wxThread::ExitCode)0;
}

void ThreadPlot::OnExit()
{
    // Clean up resources
}
